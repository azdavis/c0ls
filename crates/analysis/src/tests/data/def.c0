#use <conio>

  struct S { int a; };
//^^^^^^^^^^^^^^^^^^^^ struct-def: S

  typedef struct S* S;
//^^^^^^^^^^^^^^^^^^^^ type-def-def: S

  S mk() {
//^ type-def-use: S
  return alloc(struct S);
//                    ^ struct-use: S
}

  int foo() { int ret = 123; return ret; }
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ fn-def: foo

int bar(
  int fst,
//^^^^^^^^ var-def: fst
  int snd
//^^^^^^^ var-def: snd
) {
  int thd = 123;
//^^^^^^^^^^^^^^ var-def: thd
  return thd
//       ^^^ var-use: thd
    + snd
//    ^^^ var-use: snd
    + fst;
//    ^^^ var-use: fst
}

int main() {
  int ret = 123;
//^^^^^^^^^^^^^^ var-def: ret
  S guy = mk();
//^^^^^^^^^^^^^ var-def: guy
  if (guy != NULL) {
//    ^^^ var-use: guy
    int got = foo();
//            ^^^^^ fn-use: foo
    int a = got;
//  ^^^^^^^^^^^^ var-def: a
    ret += got
//  ^^^ var-use: ret
      + a
//      ^ var-use: a
      + guy->a;
//      ^^^ var-use: guy
  }
  while (ret < 123) {
//       ^^^ var-use: ret
    int wtf = ret;
//  ^^^^^^^^^^^^^^ var-def: wtf
    wtf += 3;
//  ^^^ var-use: wtf
    ret =
//  ^^^ var-use: ret
      wtf;
//    ^^^ var-use: wtf
  }
  for (
    int i = 0;
//  ^^^^^^^^^ var-def: i
    i < 10;
//  ^ var-use: i
    i++
//  ^ var-use: i
  ) {
    printint(i);
//           ^ var-use: i
    ret +=
//  ^^^ var-use: ret
      i;
//    ^ var-use: i
  }
  return ret;
//       ^^^ var-use: ret
}
