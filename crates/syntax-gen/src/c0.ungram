// not 100% accurate (note the commas in e.g. FnDeclItem). prefix 'content'
// tokens with '$'.

Root = Item*

Item =
  StructItem
| FnItem
| TypedefItem
| UseItem

StructItem = 'struct' '$Ident' Fields? ';'
FnItem = ret_ty:Ty '$Ident' '(' Param* ')' tail:FnTail
TypedefItem = 'typedef' Ty '$Ident'
UseItem = '#use' UseLit

Fields = '{' Field* '}'
Field = Ty '$Ident' ';'
Param = Ty '$Ident' ','
FnTail = SemicolonTail | BlockStmt
SemicolonTail = ';'
UseLit = '$LibLit' | '$StringLit'

Stmt =
  SimpStmt
| IfStmt
| WhileStmt
| ForStmt
| ReturnStmt
| BlockStmt
| AssertStmt
| ErrorStmt

SimpStmt = Simp ';'
IfStmt = 'if' '(' cond:Expr ')' yes:Stmt no:ElseBranch?
WhileStmt = 'while' '(' cond:Expr ')' body:Stmt
ForStmt =
  'for' '('
    init:Simp? init_semi:';' cond:Expr cond_semi:';' step:Simp?
  ')' body:Stmt
ReturnStmt = 'return' Expr? ';'
BlockStmt = '{' Stmt* '}'
AssertStmt = 'assert' '(' Expr ')' ';'
ErrorStmt = 'error' '(' Expr ')' ';'

ElseBranch = 'else' Stmt

Simp =
  AsgnSimp
| IncDecSimp
| DeclSimp
| ExprSimp

AsgnSimp = lhs:Expr op:AsgnOp rhs:Expr
IncDecSimp = Expr IncDec
IncDec = '++' | '--'
DeclSimp = Ty '$Ident' DefnTail?
DefnTail = '=' Expr
ExprSimp = Expr

Ty =
  IntTy
| BoolTy
| StringTy
| CharTy
| VoidTy
| PtrTy
| ArrayTy
| StructTy
| IdentTy

IntTy = 'int'
BoolTy = 'bool'
StringTy = 'string'
CharTy = 'char'
VoidTy = 'void'
PtrTy = Ty '*'
ArrayTy = Ty '[' ']'
StructTy = 'struct' '$Ident'
IdentTy = '$Ident'

Expr =
  DecExpr
| HexExpr
| StringExpr
| CharExpr
| TrueExpr
| FalseExpr
| NullExpr
| IdentExpr
| ParenExpr
| BinOpExpr
| UnOpExpr
| TernaryExpr
| CallExpr
| DotExpr
| ArrowExpr
| SubscriptExpr
| AllocExpr
| AllocArrayExpr

DecExpr = '$DecLit'
HexExpr = '$HexLit'
StringExpr = '$StringLit'
CharExpr = '$CharLit'
TrueExpr = 'true'
FalseExpr = 'false'
NullExpr = 'NULL'
IdentExpr = '$Ident'
ParenExpr = '(' Expr ')'
BinOpExpr = lhs:Expr op:BinOp rhs:Expr
UnOpExpr = op:UnOp Expr
TernaryExpr = cond:Expr '?' yes:Expr ':' no:Expr
CallExpr = '$Ident' '(' Arg* ')'
DotExpr = Expr '.' '$Ident'
ArrowExpr = Expr '->' '$Ident'
SubscriptExpr = array:Expr '[' idx:Expr ']'
AllocExpr = 'alloc' '(' Ty ')'
AllocArrayExpr = 'alloc_array' '(' Ty ',' Expr ')'

Arg = Expr ','

// support tokens

BinOp =
  '+' | '-' | '*' | '/'
| '%' | '<<' | '>>'
| '&' | '^' | '|'
| '==' | '!=' | '<' | '<=' | '>' | '>='
| '&&' | '||'

UnOp = '!' | '~' | '-' | '*'

AsgnOp =
  '='
| '+=' | '-=' | '*=' | '/='
| '%=' | '<<=' | '>>='
| '&=' | '^=' | '|='
